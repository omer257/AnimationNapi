{"version":3,"sources":["Components/Header.js","Components/ColorPickers/ColorPicker.js","Components/ColorPickers/ColorPickerWrap.js","Components/Button.js","KeyFrames/KeyFrameBounce.js","KeyFrames/KeyFrameColorChange.js","Components/Animation/Ball.js","HelperMethods/CreateRandomColor.js","Components/Animation/AnimationComponent.js","Components/Fetch.js","Hooks/Http.js","Routes/Index.js","Components/App.js","serviceWorker.js","index.js"],"names":["Header","exact","to","SketchExample","props","useState","displayColorPicker","setdisplayColorPicker","color","colors","setcolors","styles","reactCSS","width","height","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","Fragment","style","onClick","onChange","id","hex","colorPickerWrap","map","item","i","ColorPicker","key","handleColorPickerComplete","Button","className","status","children","bounce","keyframes","animation","css","changeColors","showColor","colorList","segmentLength","length","buildKeyFrames","chnageColorsAnimation","BallComponent","styled","div","KeyFrameBounce","KeyFrameColorChange","Ball","Math","floor","random","Animation","CreateRandomColor","setColors","stateAnimation","setStateAnimation","stateAnimationColor","setStateShowAnimationColor","ColorPickerWrap","newColors","slice","toggle","Fetch","url","dependencies","isLoading","setIsLoading","fetchedData","setFetchedData","useEffect","console","log","fetch","then","response","ok","Error","json","data","catch","err","useHttp","todos","filter","title","startsWith","sort","a","b","comparison","content","App","path","once","AnimationComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.06de9254.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink} from \"react-router-dom\"; \n\n const Header =()=> {\n  return (\n    <nav>\n          <ul>\n            <li>\n              <NavLink exact to=\"/\">Animation</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/api\">Api</NavLink>\n            </li> \n          </ul>\n        </nav> \n  );\n}\n\nexport default Header;","import React,{useState} from 'react';\nimport reactCSS from 'reactcss';\nimport { SketchPicker } from 'react-color';\n\nconst SketchExample = (props)=>{\n  const [displayColorPicker,setdisplayColorPicker] = useState(false);\n  const [colors,setcolors] = useState(props.color); \n\n  const handleClick = () => {\n    setdisplayColorPicker(!displayColorPicker);\n  };\n\n  const handleClose = () => {\n    setdisplayColorPicker(false);\n    props.onChange(props.id, colors);\n  };\n\n  const handleChange = (color) => {\n    setcolors(color.hex);\n  };\n \n    const styles = reactCSS({\n      'default': {\n        color: {\n          width: '36px',\n          height: '14px',\n          borderRadius: '2px',\n          background: `${colors}`,\n        },\n        swatch: {\n          padding: '5px',\n          background: '#fff',\n          borderRadius: '1px',\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n          display: 'inline-block',\n          cursor: 'pointer',\n        },\n        popover: {\n          position: 'absolute',\n          zIndex: '2',\n        },\n        cover: {\n          position: 'fixed',\n          top: '0px',\n          right: '0px',\n          bottom: '0px',\n          left: '0px',\n        },\n      },\n    });\n\n    return (\n      <React.Fragment>\n        <div style={styles.swatch} onClick={handleClick}>\n          <div style={styles.color} />\n        </div>\n        {displayColorPicker ? <div style={styles.popover}>\n          <div style={styles.cover} onClick={handleClose} />\n          <SketchPicker color={colors} onChange={handleChange} />\n        </div> : null}\n      </React.Fragment>\n    )\n  } \n\nexport default SketchExample","import React from \"react\"; \nimport ColorPicker from './ColorPicker'; \n\nconst colorPickerWrap =  (props)=>{\n  return (\n    <React.Fragment> \n    {props.colors.map((item, i) => {\n      return <ColorPicker key={i} id={i} color={props.colors[i]} onChange={props.handleColorPickerComplete} />\n    })}\n    </React.Fragment> \n  );\n}\n\nexport default colorPickerWrap;","import React from \"react\"; \n\nconst Button =(props)=> {\n  return (\n  <button className={props.status?'red':''} onClick={props.onClick}>{props.children}</button>\n  );\n}\n\nexport default Button;","import { css, keyframes } from 'styled-components'\n\nconst bounce = keyframes`\n  from {\n    transform: translateY(0) scale(1);\n  }\n  to {\n    transform: translateY(200px) scale(1, 0.7);\n  }\n`;\n\nconst animation = props =>\n  css`${bounce} 0.5s alternate cubic-bezier(0.95, 0.05, 0.795, 0.035)  infinite`\n\nexport default animation;","import { css, keyframes } from 'styled-components'\n\nconst changeColors = props =>\n  {  \n    if(!props.showColor){ \n      //return simple animation\n      return keyframes`0% { background-color:${props.colorList[0]};} 100% { background-color:${props.colorList[0]};}`; \n    }\n    const segmentLength = 100/props.colorList.length;\n    let buildKeyFrames='';\n    for(let i=0;i<props.colorList.length;i++){  \n        buildKeyFrames+=`${i===0?'0':segmentLength*i}% { background-color:${props.colorList[i]};}` \n    } \n    //Prevent white gaps\n    buildKeyFrames+=`100% { background-color:${props.colorList[props.colorList.length-1]};}` \n    \n    return keyframes` ${buildKeyFrames}`;   \n  }\n\nconst chnageColorsAnimation = props =>\n  { \n    return css`${changeColors} 3s alternate cubic-bezier(0.95, 0.05, 0.795, 0.035)  infinite` \n  }\n\nexport default chnageColorsAnimation;","import React from \"react\";\nimport styled from \"styled-components\"; \nimport KeyFrameBounce from '../../KeyFrames/KeyFrameBounce';\nimport KeyFrameColorChange from '../../KeyFrames/KeyFrameColorChange';  \n\nconst BALL_SIZE = \"48px\";   \nconst BallComponent = styled.div`\nwidth: ${BALL_SIZE};\nheight: ${BALL_SIZE}; \ntop: calc(50% - ${BALL_SIZE} / 2);\ntransform: translateY(calc(50% - ${BALL_SIZE} / 2));\nposition: absolute;\nborder:1px solid black; \nborder-radius:100%;\nleft: calc(50% - ${BALL_SIZE} / 2);\nanimation: \n${KeyFrameBounce},\n${KeyFrameColorChange} \n`;\n\nconst Ball = (props)=> {  \n  return ( \n      <BallComponent {...props}/>\n  );\n}\n\nexport default Ball;","export default () => {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}","import React, { useState } from \"react\"; \nimport ColorPickerWrap from '../ColorPickers/ColorPickerWrap'; \nimport Button from '../Button';\nimport Ball from './Ball';\nimport CreateRandomColor from '../../HelperMethods/CreateRandomColor';\n\nconst Animation = ()=> {\n  const [colors, setColors] = useState([CreateRandomColor(), CreateRandomColor(),CreateRandomColor()]);\n  const [stateAnimation, setStateAnimation] = useState(false);\n  const [stateAnimationColor, setStateShowAnimationColor] = useState(false);\n\n  const clickAnimationBounce = () => {\n    setStateAnimation(!stateAnimation);\n  };\n  const clickAnimationColor = () => {\n    setStateShowAnimationColor(!stateAnimationColor); \n  }; \n  \n  const handleColorPickerComplete = (id, color) => {\n    const newColors = colors.slice();\n    newColors[id] = color;\n    setColors(newColors);\n  }; \n\n  const addColor = () => { \n    setColors([...colors,CreateRandomColor()]);\n  }; \n\n  return (\n    <React.Fragment> \n      <ColorPickerWrap colors={colors} handleColorPickerComplete={handleColorPickerComplete}></ColorPickerWrap>\n      <Ball toggle={stateAnimation} showColor={stateAnimationColor} colorList={colors} className={!stateAnimation?'pause':''}></Ball>\n      <div>\n        <Button onClick={addColor}>Add Color</Button>\n        <Button onClick={clickAnimationBounce} status={stateAnimation}>Bounce ball</Button> \n        <Button onClick={clickAnimationColor} status={stateAnimationColor}>Change colors </Button>\n      </div>\n     </React.Fragment>\n  );\n}\n\nexport default Animation;","import React from 'react'; \nimport { useHttp } from '../Hooks/Http'\n\nconst Fetch = ()=>{\n  const [isLoading, fetchedData] = useHttp('https://jsonplaceholder.typicode.com/todos', []);\n\n  const todos = fetchedData\n    ? fetchedData.filter((item) => item.title.startsWith(\"s\")).sort(compare)\n    : []; \n\n  function compare(a, b) {\n    let comparison = 0;\n    // comparison = a.title > b.title ? 1 : -1;\n    if (a.title > b.title) {\n      comparison = a.title > b.title?1:-1;\n    } else if (a.title  < b.title) {\n      comparison = -1;\n    }\n    return comparison;\n  }\n\n  let content = <p>Loading data...</p>;\n\n  if (!isLoading && todos && todos.length > 0) {\n    content = todos.map((item) => {\n      let className = item.title[item.title.length - 1] === \"e\" ? 'mark' : ''\n      return <div className={className} key={item.id}>{item.title}</div>\n    });\n  } else if (\n    !isLoading && (!todos || todos.length === 0)\n  ) {\n    content = <p>Could not fetch any data.</p>;\n  }\n  return content;\n}\n\nexport default Fetch;\n\n","import { useState, useEffect } from 'react';\n\nexport const useHttp = (url, dependencies) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchedData, setFetchedData] = useState(null);\n \n  useEffect(() => {\n    setIsLoading(true);\n    console.log('Sending Http request to URL: ' + url);\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch.');\n        }\n        return response.json();\n      })\n      .then(data => {\n        setIsLoading(false);\n        setFetchedData(data);\n      })\n      .catch(err => {\n        console.log(err);\n        setIsLoading(false);\n      });\n  }, dependencies);\n\n  return [isLoading, fetchedData];\n};","import React from \"react\";\nimport {Switch, Route  } from \"react-router-dom\";\nimport AnimationComponent from '../Components/Animation/AnimationComponent';\nimport Fetch from '../Components/Fetch';\n\nexport default function App() {\n  return ( \n        <Switch>\n          <Route path=\"/api\">\n            <Fetch once />\n          </Route> \n          <Route path=\"/\">\n            <AnimationComponent />\n          </Route>\n        </Switch>  \n  );\n}","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Header from '../Components/Header' \nimport Routes from '../Routes/Index';\nimport  './App.css'; \n\nconst App = ()=>{\n  return (\n    <BrowserRouter> \n       <Header></Header>\n       <Routes></Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}